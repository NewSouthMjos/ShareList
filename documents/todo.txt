+1 - переключиться на PostgreSQL
+2 - реализовать авторизацию посредством django
+3 - разобраться, как хранятся пользователи средствами django
-4 - как добавить свои поля в пользователя? (в БД, где хранятся пользователи) (НЕ АКТУАЛЬНО)
5 - добавить общую модель-таблицу соответствия пользователей и списков (две таблицы, чтение+чтение\запись). Эти таблицы называются join-таблицы, например:
user_id = 7, list_id = 10
в таблице будет соответствие, что юзеру 7му можно читать список номер 10. (а так же в следующей записи - ещё списки номер 11 и тд.)
6 - проверить работу join-таблиц на примере элементарной реализации в web-интерфейсе

7 - проверить реализацию полей пользователя. 
8 - НАПИСАТЬ ТЕСТЫ, КАСАЮЩИЕСЯ ПОЛЬЗОВАТЕЛЕЙ

+9 - Оформление блока регистрации.
+10 - РАЗОБРАТЬСЯ С БАГОМ С временем обновления полей!
+11 - При создании пользователя должен добавляться список "по умолчанию" - для примера и для руководства по работе
+12 - при создании нового списка "обновлен пользователем None в None.." - исправить и убрать эту фразу
+13 - добавить страницу отображения ошибок
+14 - добавить ЛОГИРОВАНИЕ
+15 - баг - можно посмотреть название чужого списка при попытке удаления его без прав доступа
+16 - разобраться с часовыми поясами

+17 - ошибки типа "not found" должны быть обработаны в middleware, а не стандартным стредстом (url routing?)
+18 - BUG - кнопку "добавить пункт" можно ПЕРЕМЕЩАТЬ - убрать эту возможность
+19 - при логине на главной странице надо показывать что-то другое, кроме "войти/зарегистрироваться"
+20 - Issue - "Так же возможен выбор "статуса" пункта, отображающегося цветов: серый - запланировано, синий - в процессе, зелёный - готово." - текст в примере списка. Сформулировать по-русски!
21 - добавить существующую документацию в основной гит каталог

 ijisdjf*f4