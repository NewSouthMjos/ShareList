1 - приложение авторизации - встроенное django. В последствии возможно применение своей надстройки для реалзицации API и JWt.
При создании пользователя создаётся так же лист с примером использования - т.е. при создании пользователя нужно добавлять записи в БД.

2 - Вью главной страницы - запрашивает листы, принадлежащие пользователю + листы, расшареные для пользователя. Есть смысл сделать отдельным полем в БД авторизации листы, которые должен видеть пользователь.
С этого же вью можно осуществлять управление списками - CRUD + контроль доступа для списков, где пользователь - администратор.

3 - Вью деталезарованное списка - запрашивает из БД пункты и информацию по конкретному списку. Пункты списка и описание приходит в виде формы, если пользователь что-то меняет - то отправляется POST запрос на изменение данных в БД. На стороне фронтенда сделать проверку изменения информации - чтобы при каждой маленькой правке не слать и не менять всю информацию по списку.

Логика - при обращении к начальной странице -
view авторазации - встроенный djangp.

При обращении к главной странице -
view главной - обращается к main_requests.py get_lists(передать юзера), которая делает запрос в БД и отдаёт результаты. Управление списком (разрешения) - post запрос??

При обращении к детализированной странице -
view деталь - обращается к main_requests.py get_items(передать id запрашиваемого списка). Первым делом get_items проверяет, что у залогиненного юзера есть доступ к данному списку - а потом уже отдаёт сами пункты. На фронтенде пользователь что-то меняет - сохраняет по кнопке "сохранить измения" - дальше вызывается функция set_items (post-запрос).